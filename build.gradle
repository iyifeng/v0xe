apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: "eclipse-wtp"
apply plugin: 'groovy'


group = 'com.v0ex'
version = '1.0.0'

ext {
    moduleName = "v0ex"
    springBootVersion = "1.5.7.RELEASE"
    mavenPublicURL = "http://10.19.15.43:18081/nexus/content/groups/public/"
}

repositories {
    maven { url mavenPublicURL }
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
sourceSets {
    main {
        java { srcDirs = ['src/main/java']}
         resources {
               srcDirs = ['src/main/resources']
         }
    }

}


dependencies{
    compile	"org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
    compile	"org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
    compile	"org.springframework.boot:spring-boot-starter-aop:${springBootVersion}"
    compile	"org.springframework.boot:spring-boot-starter-data-redis:${springBootVersion}"
    compile	"org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
    compile ("org.springframework.boot:spring-boot-devtools:${springBootVersion}"){
        exclude group:	'org.apache.tomcat',	module:	'tomcat-jdbc'
    }
    compile "com.gitee.reger:spring-boot-starter-dubbo:1.0.9"
    compile "mysql:mysql-connector-java:6.0.5"
    compile "com.zaxxer:HikariCP:2.6.0"
    compile "com.alibaba:fastjson:1.2.31"
    compile group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.6.0'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'
    compile "org.apache.velocity:velocity:1.7"
    compile "org.apache.velocity:velocity-tools:2.0"
    compile "com.aliyun.oss:aliyun-sdk-oss:2.8.3"
    compile group: 'org.apache.poi', name: 'poi', version: '3.15'
    testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
}


buildscript {
    ext {
        springBootVersion = "1.5.7.RELEASE"
    }
    repositories {
        maven { url "http://10.19.15.43:18081/nexus/content/groups/public/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath group: 'com.ai.kara.plugin', name: 'apidocplugin', version: '2.0.0'
    }
}



jar {
    baseName =moduleName
}

task copyBin(type: Copy) {
    from fileTree(dir: 'src/main/resources',includes: ['*.sh','*.properties'])
    destinationDir file("$buildDir/config")
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

def apidocTask=task("apidocTask",type:com.ai.kara.gradle.plugin.APIDocTask){
    source = file("src/main/java/com/v0ex/controller/apidoc.json")
    targetDir= file("$buildDir/apidocdest/static/v0ex")
}


build.dependsOn copyBin

